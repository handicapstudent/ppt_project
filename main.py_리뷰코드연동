# main.py
import os
import sqlite3
import sys
from PyQt5.QtWidgets import (
    QApplication, QWidget, QLabel, QLineEdit, QPushButton, QVBoxLayout,
    QMessageBox, QDialog, QHBoxLayout, QScrollArea, QGroupBox, QCheckBox
)
from PyQt5.QtGui import QFont, QPixmap  # QPixmap 추가!
from PyQt5.QtCore import Qt

from settings import AppSettings
from tts import speak

from reservation_utils import reserve_seat  # 예약 기능
from reservation_utils import init_db, save_user, get_user
from review import ReviewDialog, init_database as init_review_db
init_review_db()
# --- 메인 윈도우 ---
class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.restaurant_selection_window = RestaurantReservation()
        self.login_window = LoginWindow(self)
        self.login_window.show()

# --- 로그인 창 ---
class LoginWindow(QWidget):
    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window
        self.setWindowTitle("HelpMeal 로그인")
        self.resize(600, 400)
        init_db()
        self.initUI()

    def initUI(self):
        # === 배경 이미지 ===
        bg_label = QLabel(self)
        image_path = os.path.join(os.path.dirname(__file__), "충북대학교 정문.jpg")
        if os.path.exists(image_path):
            pixmap = QPixmap(image_path).scaled(self.size(), Qt.KeepAspectRatioByExpanding, Qt.SmoothTransformation)
            bg_label.setPixmap(pixmap)
        else:
            bg_label.setStyleSheet("background-color: #f0f0f0;")
        bg_label.setScaledContents(True)
        bg_label.setGeometry(0, 0, self.width(), self.height())

        # === 반투명 중앙 위젯 ===
        central_widget = QWidget(self)
        central_layout = QVBoxLayout(central_widget)
        central_layout.setContentsMargins(40, 30, 40, 30)
        central_widget.setFixedSize(360, 300)
        central_widget.move((self.width() - central_widget.width()) // 2,
                            (self.height() - central_widget.height()) // 2)
        central_widget.setStyleSheet("""
            background-color: rgba(255, 255, 255, 230);
            border-radius: 16px;
        """)

        # === 로고 & 제목 ===
        title_layout = QHBoxLayout()
        logo_label = QLabel()
        logo_path = os.path.join(os.path.dirname(__file__), "HelpMeal.png")
        if os.path.exists(logo_path):
            logo_pixmap = QPixmap(logo_path).scaled(48, 48, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            logo_label.setPixmap(logo_pixmap)

        title_text = QLabel("HelpMeal")
        title_text.setFont(QFont("Arial", 20, QFont.Bold))
        title_text.setStyleSheet("color: #333333;")

        title_layout.addWidget(logo_label)
        title_layout.addSpacing(10)
        title_layout.addWidget(title_text)
        title_layout.addStretch()
        central_layout.addLayout(title_layout)

        # === 입력창 ===
        self.id_input = QLineEdit()
        self.id_input.setPlaceholderText("ID")
        self.pw_input = QLineEdit()
        self.pw_input.setPlaceholderText("Password")
        self.pw_input.setEchoMode(QLineEdit.Password)

        for widget in [self.id_input, self.pw_input]:
            widget.setStyleSheet("""
                QLineEdit {
                    background-color: white;
                    padding: 8px;
                    border: 1px solid #ccc;
                    border-radius: 8px;
                }
            """)
            central_layout.addWidget(widget)

        # === 로그인 버튼 ===
        login_btn = QPushButton("로그인")
        login_btn.clicked.connect(self.login_check)
        login_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                padding: 10px;
                border-radius: 10px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        central_layout.addWidget(login_btn)

        # === 하단 링크 버튼 ===
        link_layout = QHBoxLayout()
        signup_btn = QPushButton("회원가입")
        pw_find_btn = QPushButton("비밀번호 찾기")
        for btn in [signup_btn, pw_find_btn]:
            btn.setFlat(True)
            btn.setStyleSheet("""
                QPushButton {
                    color: #555;
                    text-decoration: underline;
                }
                QPushButton:hover {
                    color: #000;
                }
            """)
            btn.setCursor(Qt.PointingHandCursor)

        signup_btn.clicked.connect(self.signup)
        pw_find_btn.clicked.connect(self.find_password)


        link_layout.addWidget(signup_btn)
        link_layout.addStretch()
        link_layout.addWidget(pw_find_btn)

        central_layout.addLayout(link_layout)


        # === TTS 설정 체크박스 ===
        self.tts_enabled = True
        tts_checkbox = QCheckBox("TTS 음성안내 활성화")
        tts_checkbox.setChecked(True)
        tts_checkbox.stateChanged.connect(
            lambda state: setattr(AppSettings, 'tts_enabled', state == Qt.Checked)
        )
        central_layout.addWidget(tts_checkbox)

        # signup_btn.clicked.connect(self.signup)
        # pw_find_btn.clicked.connect(self.find_password)

        central_layout.addLayout(link_layout)

        # 엔터키로 하기#
        self.id_input.returnPressed.connect(login_btn.click)
        self.pw_input.returnPressed.connect(login_btn.click)


    def login_check(self):
        user_id = self.id_input.text()
        password = self.pw_input.text()
        user = get_user(user_id)
        if user and user[1] == password:
            if AppSettings.tts_enabled:
                speak("로그인 되셨습니다.")
            self.main_window.restaurant_selection_window.set_user(user_id)
            self.main_window.restaurant_selection_window.show()
            self.hide()
        else:
            if AppSettings.tts_enabled:
                speak("학번 또는 비밀번호가 틀렸습니다.")
            QMessageBox.warning(self, "로그인 실패", "학번 또는 비밀번호가 틀렸습니다.")
            self.pw_input.clear()

    def signup(self):
        signup_dialog = SignupDialog(self)
        signup_dialog.exec()
        if signup_dialog.user_info:
            user_id, password, question, answer = signup_dialog.user_info
            if get_user(user_id):
                QMessageBox.warning(self, "회원가입 오류", "이미 존재하는 학번입니다.")
                return
            save_user(user_id, password, question, answer)
            if AppSettings.tts_enabled:
                speak("회원가입이 완료되었습니다.")
            QMessageBox.information(self, "회원가입 성공", f"{user_id}님, 회원가입이 완료되었습니다.")


    def find_password(self):
        find_pw_dialog = FindPasswordDialog()
        find_pw_dialog.exec_()



# --- 회원가입 다이얼로그 ---
class SignupDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("회원가입")
        self.setGeometry(150, 150, 350, 250)
        self.user_info = None
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()

        self.id_input = QLineEdit()
        self.id_input.setPlaceholderText("새 학번")
        layout.addWidget(self.id_input)

        self.pw_input = QLineEdit()
        self.pw_input.setPlaceholderText("새 비밀번호")
        self.pw_input.setEchoMode(QLineEdit.Password)
        layout.addWidget(self.pw_input)

        self.pw_confirm_input = QLineEdit()
        self.pw_confirm_input.setPlaceholderText("비밀번호 확인")
        self.pw_confirm_input.setEchoMode(QLineEdit.Password)
        layout.addWidget(self.pw_confirm_input)

        self.question_input = QLineEdit()
        self.question_input.setPlaceholderText("비밀번호 찾기 질문")
        layout.addWidget(self.question_input)

        self.answer_input = QLineEdit()
        self.answer_input.setPlaceholderText("질문 답변")
        layout.addWidget(self.answer_input)

        signup_btn = QPushButton("회원가입")
        signup_btn.clicked.connect(self.signup_check)
        layout.addWidget(signup_btn)

        cancel_btn = QPushButton("취소")
        cancel_btn.clicked.connect(self.close)
        layout.addWidget(cancel_btn)

        self.setLayout(layout)

    def signup_check(self):
        new_id = self.id_input.text()
        new_pw = self.pw_input.text()
        pw_confirm = self.pw_confirm_input.text()
        question = self.question_input.text()
        answer = self.answer_input.text()

        if not new_id or not new_pw or not question or not answer:
            QMessageBox.warning(self, "회원가입 오류", "모든 항목을 입력해주세요.")
            return

        if new_pw != pw_confirm:
            QMessageBox.warning(self, "회원가입 오류", "비밀번호 확인이 일치하지 않습니다.")
            return

        if get_user(new_id):
            QMessageBox.warning(self, "회원가입 오류", "이미 존재하는 학번입니다.")
            return

        self.user_info = (new_id, new_pw, question, answer)
        self.close()

# --- 비밀번호 찾기 창 ---
class FindPasswordDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("비밀번호 찾기")
        self.setGeometry(150, 150, 350, 200)
        self.initUI()
        self.current_user_id = None

    def initUI(self):
        layout = QVBoxLayout()

        # 학번 입력
        self.id_input = QLineEdit()
        self.id_input.setPlaceholderText("학번 입력")
        layout.addWidget(self.id_input)

        # 보안 질문 표시
        self.question_display = QLabel("질문이 여기에 표시됩니다.")
        layout.addWidget(self.question_display)

        # 질문에 대한 답변 입력
        self.answer_input = QLineEdit()
        self.answer_input.setPlaceholderText("질문에 대한 답변 입력")
        layout.addWidget(self.answer_input)

        # 확인 버튼
        find_btn = QPushButton("확인")
        find_btn.clicked.connect(self.check_answer)
        layout.addWidget(find_btn)

        # 학번 입력 시 질문 표시 업데이트
        self.id_input.textChanged.connect(self.display_question)

        self.setLayout(layout)

    def display_question(self):
        user_id = self.id_input.text()
        self.current_user_id = user_id
        user = get_user(user_id)
        if user:
            self.question_display.setText(user[2])  # security_question
        else:
            self.question_display.setText("존재하지 않는 학번입니다.")

    def check_answer(self):
        user = get_user(self.current_user_id)
        if user and self.answer_input.text() == user[3]:  # security_answer
            QMessageBox.information(self, "비밀번호", f"비밀번호는: {user[1]}")  # password
            self.close()
        else:
            QMessageBox.warning(self, "오류", "답변이 일치하지 않습니다.")


# --- 식당 선택 및 예약 창 ---
class RestaurantReservation(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("학식 예약 프로그램")
        self.setGeometry(100, 100, 800, 400)
        self.current_user_id = None
        self.initUI()

    def set_user(self, user_id):
        self.current_user_id = user_id

    def initUI(self):
        main_layout = QVBoxLayout()

        title = QLabel("학식 예약 시스템")
        title.setFont(QFont("Arial", 18, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(title)

        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        content = QWidget()
        content_layout = QHBoxLayout()

        restaurants = [
            {"name": "한빛식당", "menus": ["김치찌개", "제육볶음", "돈까스"], "allergy": "우유, 땅콩"},
            {"name": "별빛식당", "menus": ["된장찌개", "생선구이", "오므라이스"], "allergy": "대두, 밀"},
            {"name": "은하수식당", "menus": ["부대찌개", "닭갈비", "스파게티"], "allergy": "계란, 토마토"}
        ]

        for restaurant in restaurants:
            box = self.create_restaurant_box(restaurant)
            content_layout.addWidget(box)

        content.setLayout(content_layout)
        scroll.setWidget(content)
        main_layout.addWidget(scroll)
        self.setLayout(main_layout)

    def create_restaurant_box(self, restaurant):
        group_box = QGroupBox()
        layout = QVBoxLayout()

        name_label = QLabel(restaurant["name"])
        name_label.setFont(QFont("Arial", 14, QFont.Bold))
        name_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(name_label)

        menu_label = QLabel("\n".join(restaurant["menus"]))
        menu_label.setFont(QFont("Arial", 12))
        layout.addWidget(menu_label)

        allergy_label = QLabel(f"알레르기 정보: {restaurant['allergy']}")
        allergy_label.setFont(QFont("Arial", 10))
        layout.addWidget(allergy_label)

        reserve_button = QPushButton("예약하기")
        reserve_button.clicked.connect(lambda _, r=restaurant["name"]: self.reserve_seat_dialog(r))
        layout.addWidget(reserve_button)
        review_button = QPushButton("후기 남기기")
        review_button.clicked.connect(lambda _, r=restaurant["name"]: self.leave_review_dialog(r))
        layout.addWidget(review_button)
        group_box.setLayout(layout)
        group_box.setFixedSize(230, 280)
        return group_box

    def reserve_seat_dialog(self, restaurant_name):
        if not self.current_user_id:
            QMessageBox.warning(self, "오류", "먼저 로그인하세요.")
            return
        reserve_seat(self, restaurant_name, self.current_user_id)

    def leave_review_dialog(self, restaurant_name):
        if not self.current_user_id:
            QMessageBox.warning(self, "오류", "먼저 로그인하세요.")
            return
        review_dialog = ReviewDialog(restaurant_name, self.current_user_id)
        review_dialog.exec_()
# --- 프로그램 실행 ---
if __name__ == "__main__":
    app = QApplication(sys.argv)
    main_window = MainWindow()
    sys.exit(app.exec_())

